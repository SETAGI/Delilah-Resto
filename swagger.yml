openapi: 3.0.0

info:
 version: 1.0.0
 title: Delilah Restó API
 description: Dedicated api to describe the backend behavior of the Delilah Restó application

servers:
 - description: SwaggerHub API Auto Mocking
   url: https://virtserver.swaggerhub.com/SETAGI/DelilahRestoAPI/1.0.0
 - description: Local Server
   url: https://localhost:3000

paths:
 /register:
  post:
   tags:
    - Customers
   summary: Create a new user
   description: Create a new user in database
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: '#/components/schemas/Users'

   responses:
    201:
     description: User created successfully
     content:
      application/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: true
         message:
          type: string
          example: User created successfully
         data:
          type: object
          properties:
           user_id:
            type: integer
            example: 1
           username:
            type: string
            example: sebas123
           full_name:
            type: string
            example: Sebastian Tamayo
           email:
            type: string
            example: sebastiantamayogiraldo@gmail.com
           phone:
            type: integer
            example: 3168547896
           shipping_adress:
            type: string
            example: 2025 E Street, NW Washington DC
           password:
            type: string
            example: password123
           es_admin:
            type: boolean
            example: false
           creation_date:
            type: string
            format: date-time
            example: '2020-09-10T10:10:12Z'

    400:
     description: Missing data
     content:
      application/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          example: Error, missing data
    401:
     description: Previously registered user
     content:
      application/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          example: Error, Previously registered user
 /login:
  post:
   tags:
    - Customers
   summary: Login a user to the system
   description: This login returns a JWT that is used for future logins
   requestBody:
    required: true
    content:
     application/json:
      schema:
       type: object
       properties:
        user_name:
         type: string
         example: sebas123
        password:
         type: string
         example: password123

   responses:
    200:
     description: Logged successfully
     content:
      application/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: true
         token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyQWRtaW4iOiJBbGVqb0RXRlMiLCJwYXNzd29yZCI6MTIzNDU2LCJpYXQiOjE2MDAxMzY4MTksImV4cCI6MTYwMDIyMzIxOX0.kiOnKT1AoiFqSiPuM2TAh58rI-zYy9PMXrJ2RPwKH10
         message:
          type: string
          example: Logged successfully

    401:
     description: Incorrect credentials
     content:
      application/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          example: Error, incorrect credentials
 /products:
  get:
   tags:
    - Customers
   summary: Returns all available products
   description: Returns all available products in database
   responses:
    200:
     description: Successful request
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: true
         message:
          type: string
          example: Successful request
         data:
          type: array
          items:
           $ref: '#/components/schemas/Products'
  post:
   tags:
    - Administrators
   summary: Create a new product
   description: Create a new product in database
   requestBody:
    required: true
    content:
     application/json:
      schema:
       type: object
       properties:
        name:
         type: string
         example: Hot Dog
        description:
         type: string
         example: Hot dog with all toppings
        photo_url:
         type: string
         example: https://hotDog.com/hotDog.jpg
        price:
         type: number
         example: 10.5
        available:
         type: boolean
         example: true

   responses:
    201:
     description: Product created successfully
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: true
         message:
          type: string
          example: Product created successfully
         data:
          $ref: '#/components/schemas/Products'

    401:
     description: Only an admin user can add products
     content:
      application/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          example: Error, only an admin user can add products
 /products/{id}:
  get:
   tags:
    - Customers
   summary: Returns an specific product
   description: Returns anl specific product
   parameters:
    - name: id
      in: path
      description: Product ID you want to search.
      required: true
      schema:
       type: integer
   #HAY RESPUESTAS QUE PUEDO INGRESAR EN UN COMPONENTE
   responses:
    200:
     description: Successful request
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: true
         message:
          type: string
          example: Successful request
         data:
          $ref: '#/components/schemas/Products'
    401:
     description: Incorrect credentials
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          example: Error, incorrect credentials
    404:
     description: Not found
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          example: Error, not found

  put:
   tags:
    - Administrators
   summary: Modify a specific product
   description: Modify a specific product
   parameters:
    - name: id
      in: path
      description: Product ID you want to modify.
      required: true
      schema:
       type: integer
   requestBody:
    required: true
    content:
     application/json:
      schema:
       # QUITAR LO DE LAS FECHAS Y LAS HORAS SE VERIA MEJOR
       $ref: '#/components/schemas/Products'
   #HAY RESPUESTAS QUE PUEDO INGRESAR EN UN COMPONENTE
   responses:
    200:
     description: Successful request
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: true
         message:
          type: string
          example: successful change
         data:
          $ref: '#/components/schemas/Products'

    #VALIDAR SI ESTA DEBE SER LA RESPUESTA CORRECTA O VER QUE ESTOY MANDANDO EN EL REPONSE (INCORRECT CREDENTIALS NO ES..)
    401:
     description: Incorrect credentials
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          #MODIFICAR ESTO QUE SEA ERROR DE TOKEN O ALGO ASI
          example: Error, incorrect credentials
    404:
     description: Not found
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          example: Error, not found
 /users:
  get:
   tags:
    - Administrators
   summary: Returns all users
   description: Returns all users from database
   responses:
    200:
     description: Successful request
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: true
         message:
          type: string
          example: Successful request
         data:
          type: array
          items:
           $ref: '#/components/schemas/Users'

    401:
     description: Unauthorized
     content:
      application/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          example: Error, Unauthorized

 /users/{id}:
  get:
   tags:
    - Administrators
   summary: Returns a specific user
   description: Returns a specific user
   parameters:
    - name: id
      in: path
      description: User ID you want to search.
      required: true
      schema:
       type: integer
   #HAY RESPUESTAS QUE PUEDO INGRESAR EN UN COMPONENTE
   responses:
    200:
     description: Successful request
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: true
         message:
          type: string
          example: Successful request
         data:
          $ref: '#/components/schemas/Users'

    #VALIDAR SI ESTA DEBE SER LA RESPUESTA CORRECTA O VER QUE ESTOY MANDANDO EN EL REPONSE (INCORRECT CREDENTIALS NO ES..)
    401:
     description: Incorrect credentials
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          example: Error, incorrect credentials
    404:
     description: Not found
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          example: Error, not found

  put:
   tags:
    - Administrators
   summary: Modify a specific user
   description: Modify a specific user
   parameters:
    - name: id
      in: path
      description: User ID you want to search.
      required: true
      schema:
       type: integer
   requestBody:
    required: true
    content:
     application/json:
      schema:
       # QUITAR LO DE LAS FECHAS Y LAS HORAS SE VERIA MEJOR
       $ref: '#/components/schemas/Users'
   #HAY RESPUESTAS QUE PUEDO INGRESAR EN UN COMPONENTE
   responses:
    200:
     description: Successful request
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: true
         message:
          type: string
          example: successful change
         data:
          $ref: '#/components/schemas/Users'

    #VALIDAR SI ESTA DEBE SER LA RESPUESTA CORRECTA O VER QUE ESTOY MANDANDO EN EL REPONSE (INCORRECT CREDENTIALS NO ES..)
    401:
     description: Incorrect credentials
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          #MODIFICAR ESTO QUE SEA ERROR DE TOKEN O ALGO ASI
          example: Error, incorrect credentials
    404:
     description: Not found
     content:
      aplication/json:
       schema:
        type: object
        properties:
         ok:
          type: boolean
          example: false
         message:
          type: string
          example: Error, not found

components:
 schemas:
  Products:
   type: object
   properties:
    product_id:
     type: integer
     example: 1
    name:
     type: string
     example: Hot dog
    description:
     type: string
     example: Hot dog with all toppings
    photo_url:
     type: string
     example: https://hotDog.com/image.jpg
    price:
     type: number
     example: 10.5
    creation_date:
     type: string
     format: date-time
     example: '2020-09-10T10:10:12Z'
    available:
     type: boolean
     example: true
  Users:
   type: object
   properties:
    user_id:
     type: integer
     example: 1
    username:
     type: string
     example: sebas123
    full_name:
     type: string
     example: Sebastian Tamayo
    email:
     type: string
     example: sebastiantamayogiraldo@gmail.com
    phone:
     type: number
     example: 3168547896
    shipping_adress:
     type: string
     example: 2025 E Street, NW Washington DC
    password:
     type: string
     example: password123
    es_admin:
     type: boolean
     example: false
    creation_date:
     type: string
     format: date-time
     example: '2020-09-10T10:10:12Z'
